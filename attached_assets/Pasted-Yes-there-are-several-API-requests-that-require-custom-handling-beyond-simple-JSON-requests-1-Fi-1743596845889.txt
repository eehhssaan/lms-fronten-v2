Yes, there are several API requests that require custom handling beyond simple JSON requests:

1. File Uploads for Assignments and Course Materials
Assignment Submissions with Files
Endpoint: POST /api/assignments/:id/submit
Handling Required: Uses multipart/form-data for file uploads
Implementation:
// Use FormData API for file uploads
const submitAssignmentWithFile = async (assignmentId, file, textSubmission) => {
  const formData = new FormData();
  formData.append('file', file);
  if (textSubmission) {
    formData.append('textSubmission', textSubmission);
  }
  
  // Note that Content-Type should NOT be set - browser will set it with boundary
  return AssignmentAPI.submitAssignmentWithFile(assignmentId, formData);
};
Course Content File Uploads
Endpoint: POST /api/contents
Handling Required: Also uses multipart/form-data
Note: The API expects the content fields as regular form fields, not JSON
2. Batch Operations
Bulk Content Creation
Endpoint: POST /api/contents/bulk
Special Handling: Allows creating multiple content items at once for module structure
Format:
{
  "courseId": "courseId",
  "contents": [
    { /* content 1 */ },
    { /* content 2 */ },
    // ... more content items
  ]
}
3. Download Operations
Several endpoints return files rather than JSON:

Content Downloads
Endpoint: GET /api/contents/:id/download
Handling Required: Returns file blob, not JSON
Implementation:
// Create a download link for the user
const downloadContent = async (contentId, filename) => {
  try {
    const blob = await ContentAPI.downloadContentFile(contentId);
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename || 'download';
    document.body.appendChild(a);
    a.click();
    window.URL.revokeObjectURL(url);
    document.body.removeChild(a);
  } catch (error) {
    console.error('Download failed:', error);
  }
};
Assignment Submission Downloads
Endpoint: GET /api/assignments/submissions/:id/download/:attachmentId
Handling Required: Also returns file blob
4. No Built-in Real-time Updates
The API doesn't include real-time updates or WebSocket connections. 